import React, { useState, useEffect } from 'react';
import { useTheme } from './ThemeContext';               
import './MotivationalTimer.css';

function MotivationalTimer (){

    const { isDarkTheme, toggleTheme } = useTheme();    
    const [name, setName] = useState(() => {
        return localStorage.getItem('userName') || '';
    });
    const [time, setTime] = useState(10);
    const [isRunning, setIsRunning] = useState(false);
    const [isFinished, setIsFinished] = useState(false);
    const [completionCount, setCompletionCount] = useState(() => {
        return parseInt(localStorage.getItem('completionCount')) || 0;
    });
    const [selectedTime, setSelectedTime] = useState(10);
   

    //–ü–æ—Å–ª–µ–¥–Ω–∏–π–π —Ä–∞—É–Ω–¥ –µ–º–∞–∞ –±—Ä–∞–∞–∞—Ç 
    const Emoji = {
        first: 'üéØ',
        fifth: 'üèÜ',
        tenth: 'üëë',
        twentieth: 'üåü',
        default: 'üí™'
    };
    
   


    const getAchievementEmoji = () => {                   
        if (completionCount === 1)  return Emoji.first;
        if (completionCount === 5)  return Emoji.fifth;
        if (completionCount === 10) return Emoji.tenth;
        if (completionCount === 20) return Emoji.twentieth;
        return Emoji.default;
    };

    // –¥–æ–±–∞–≤–∏–ª –≤—Ç–æ—Ä–æ–π —Ä–∞—É–Ω–¥)
    const motivationalPhrases = [
        "–¢—ã —Ç–∏–≥—Ä –±—Ä–∞–∞—Ç, {name} ",
        "–ë—Ä–∞—Ç –ª—É—á—à–∏–π, {name} ",
        "–ö—Ä–∞–∞–∞—à—Å—ã–Ω–≥–æ–π –±—Ä–∞–∞—Ç, {name} ",
        "Demo Day —Å–µ–Ω—ñ–∫—ñ “ì–æ–π –±—Ä–∞—Ç, {name} ",
        "–í—Å–µ –¥–µ–≤–æ—á–∫–∏ —Ç–≤–æ–∏ –±—Ä–∞—Ç –¥–µ–µ–µ), {name} "
    ];
    const getRandomPhrase = () => {
        const randomIndex = Math.floor(Math.random() * motivationalPhrases.length);
        return motivationalPhrases[randomIndex].replace('{name}', name);
    }

    //–ø–æ–ª—É—á–∞–µ—Ç—Å—è —Å–æ—Ö—Ä–∞–Ω–µ–µ–º –∏–º—è –≤ –ª–æ–∫–∞–ª —Å—Ç—Ä–æ–∞–¥–∂ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏
    useEffect(() => {
        localStorage.setItem('userName', name);
    }, [name]);

    useEffect(() => {
        localStorage.setItem('completionCount', completionCount.toString());
    }, [completionCount]);

    // —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –∑–≤—É—É–∫–∞ –±—Ä–∞–∞—Ç
    const playCompletionSound = () => {
        const audio = new Audio('/success.mp3');
        audio.play();
    };

    useEffect(() => {
        let timer ;
        if (isRunning && time > 0){
            timer = setInterval(() => {
                setTime((prev) => prev - 1);
            }, 1000);
        } else if (time === 0 && isRunning){
            setIsRunning(false);
            setIsFinished(true);
            setCompletionCount(prev => prev + 1);
            playCompletionSound();
           
        }
        return () => clearInterval(timer);
    }, [isRunning, time]);

    const handleStart = () => {
        if (name.trim() !== ""){
            setIsRunning(true);
            setIsFinished(false);
            setTime(selectedTime);
        }
    };
    const handleReset = () => {
        setName("");
        setTime(selectedTime);
        setIsRunning(false);
        setIsFinished(false);
    };
    const handleTryAgain = () => {
        setTime(selectedTime);
        setIsRunning(true);
        setIsFinished(false);
    }

    const progress = ((selectedTime - time) / selectedTime) * 100;

    return (
      
        <div className={`timer-container ${isDarkTheme ? 'dark' : 'light'}`}>
          
            <button onClick={toggleTheme} className="theme-toggle">
                {isDarkTheme ? '‚òÄÔ∏è' : 'üåô'}
            </button>

            {/* —ç—Ç–æ –∫–∞–∫ —è –ø–æ–Ω—è–ª –±–ª–æ–∫ –¥–ª—è –≤–≤–æ–¥–∞ –∏–º–µ–Ω–∏ –∏ —Å—Ç–∞—Ä—Ç–∞  */}
            {!isRunning && !isFinished && (
                <div className="input-section">
                    <input 
                        type="text" 
                        placeholder="Enter your name" 
                        value={name} 
                        onChange={(e) => setName(e.target.value)}
                        className="name-input"
                    />
                    <select 
                        value={selectedTime} 
                        onChange={(e) => setSelectedTime(Number(e.target.value))}
                        className="time-select"
                    > 
                        <option value={10}>10 —Å–µ–∫—É–Ω–¥</option>
                        <option value={20}>20 —Å–µ–∫—É–Ω–¥</option>
                        <option value={30}>30 —Å–µ–∫—É–Ω–¥</option>
                    </select>
                    <button 
                        onClick={handleStart} 
                        disabled={!name.trim()}
                        className="start-button"
                    >
                        –°—Ç–∞—Ä—Ç –¢–∞–π–º–µ—Ä–∞
                    </button>
                </div>
            )}

            {/* –±–ª–æ–∫ —Å —Ç–∞–π–º–µ—Ä–æ–æ–æ–º –ø—Ä–∏–∫–æ–æ–ª*/}
            {isRunning && (
                <div className="timer-section">
                    <h2>{name}, –æ—Å—Ç–∞–ª–æ—Å—å {time} —Å–µ–∫</h2>
                    <div className="progress-bar">
                        <div 
                            className="progress-fill"
                            style={{ width: `${progress}%` }}
                        />
                    </div>
                </div>
            )}
                    
            {/*–±–ª–æ–∫ —Å —Ä–µ–∑–∞–ª—Ç–æ–º*/ }
            {isFinished && (
                <div className="result-section">
                    <h2 className="completion-message">
                        {getAchievementEmoji()} {getRandomPhrase()}
                    </h2>
                    <p className="completion-count">
                        –í—ã–ø–æ–ª–Ω–µ–Ω–æ —Ä–∞–∑: {completionCount}
                    </p>
                    <button 
                        onClick={handleTryAgain}
                        className="try-again-button"
                    >
                        –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –µ—â—ë —Ä–∞–∑
                    </button>
                </div>
            )}

            {/* –ø–æ–ª—É—á–∞–µ—Ç—Å—è –∫–Ω–æ–ø–∫–∞ –¥–ª—è —Å–±—Ä–æ—Å–∞*/ }
            {(isRunning || isFinished) && (
                <button 
                    onClick={handleReset}
                    className="reset-button"
                >
                    –°–±—Ä–æ—Å
                </button>
            )}
        </div>
    );
}

export default MotivationalTimer;
